ej manejo de excepciones ej 3 parcialito:

#**Consigna N°3** (Manejo de exepciones)
#Ejecutá el script_misterioso.py y realizá resolvé:
#    1. ¿Qué tipo de exepción arroja la corrida del script? 
#    2. Mejorá el código para que capture dicho error específicamente y lo maneje imprimiendo una advertencia al usuario sobre las posibles causas de dicho error
#    3. ¿Qué otras excepciones deberias considerar?

#esta es la funcion que da el enunciado:

"""
muestras_2 = []

def obtener_media(lista):
    sumatoria = 0

    for valor in lista:
        sumatoria += valor
    longitud = len(lista)

    return sumatoria / longitud

obtener_media(muestras_2)
"""
#1:
#como error me da ZeroDivisionError

#2:
muestras_2 = []

def obtener_media(lista):
    sumatoria = 0

    for valor in lista:
        sumatoria += valor
    try:                       #el try se lo pongo recien a esta altura que es donde puede dar error
        longitud = len(lista)
        return sumatoria / longitud
    except ZeroDivisionError:     #pongo except con el error que se que me da y abajo printeo mensaje        
        print("no se puede dividir por 0") 

print(obtener_media(muestras_2))
#3:
#se podria verificar que la lista, sea una lista, ya que si el parametro es de otro tipo(no iterable), el for no funcionaria


TEORIAAAA:

Manejo de excepciones
Sintaxis
try:
acción a realizar si NO hay errores dentro del try
except:
acción a realizar si SI hay errores dentro del try
else:
acción a realizar SI NO hay ninguno except (se ejecuta después del finally, si es
que hay)
finally:
acción a realizar luego que se ejecute el try o el except, es decir, se ejecuta
independientemente de si hubo errores o no
Creación de errores
Cuando conozco los posibles errores que pueda tener mi programa, puede crear mis
propios errores y/o ejecutar un except unicamente para un error en especifico, aunque
este except se puede ejecutar una o varias veces (cada una de ellas con un error
diferente), dejando por último a un except general en caso de que hubiera un error que
no haya contemplado.
except ZeroDivisionError:
acción a realizar cuando en el try se quiera dividir algo por cero
except TypeError:
acción a realizar cuando en el try se quiera mezclar (y no se pueda) distintos tipos
de datos
except (ZeroDivisionError, TypeError):
accion a realizar
except SyntaxError:
acción a realizar cuando en el try haya un error de sintaxis
except NameError;
acción a realizar cuando en el try se haya usado una variable sin definirla
previamente
Raise
Siguiendo con la logica de los except para crear errores, vos también podes crear tus
propios mensajes de error para cuando se ejecute un except especial y también forzar al
programa a ejecutar errores,
Ejemplo:
try:
resultado = a + b
if resultado < 0:
raise ValueError(“no se puede resul negativo”)
except ValueError as err
print(err)
----------------
try:
acción a realizar
if condición:
raise ZeroDivisionError(“Se intento dividir por cero”)
except ZeroDivisionError:
acción a realizar
except:
acción a realizar
Entonces lo que esta pasando en este ejemplo es que si se cumple la condición en el try
se va a ejecutar el error ZeroDivisionError independientemente de si era un error o no, y
si no pusiste ningún except se te frenará el programa, pero para eso generá un excepto
personalizado para que no pase.
Para devolver el mensaje que le pase a ese error en el raise, puedo hacer lo siguiente:
except ZeroDivisionError as variable_error:
print(variable_error)

OTRO RESUMEN:
Manejo de Excepciones:
Existen 2 tipos de errores en Python, de sintaxis y excepciones.
Errores de sintaxis:
Cuando hay errores se deja de correr el código. Por eso es útil salvarlos.
Excepciones:
Los errores que  se producen mientras se ejecuta son llamados excepciones. Existe distintos tipos de excepciones y por lo gral aparece el nombre de la excepción.
Para salvar los errores se usa try y except
def mitades(numero):
    try:
        return numero/2
    except TypeError:
        print("El argumento debe ser un número")
    except:
        print("No se puede dividir")

Si se conoce el posible error se pone Except el error, sino solo except
Se puede usar raise para lanzar el tipo de error que queremos y que diga algo en particular.

def es_string(argumento):
  if argumento != str:
    raise TypeError("Only strings are allowed")
 Si se pasa otro argumento que no sea string, tira TypeError y el mensaje

MIOO:
"""#menejo de excepciones
2 tipos d error, de sintaxis o excepciones
"""

#errores d sintaxis:
>>> print(Hola mundo')
  File "<stdin>", line 1
    print(Hola mundo')
               ^
SyntaxError: invalid syntax

#error d sintaxis:   desafio 1
# Solve the quadratic equation ax**2 + bx + c = 0

# import complex math module
import cmath

a = 1
b = 5
c = 6

# calculate the discriminant
d = (b**2) - (4*a*c)

# find two solutions
sol1 = (-b-cmath.sqrt(d)/(2*a)            #da error xq falta cerrar un parentesis ->es error d sintaxis
sol2 = (-b+cmath.sqrt(d))/(2*a)

print('The solution are {0} and {1}'.format(sol1,sol2))

#error de ejecucion y no d sintaxis se llaman "excepciones"
>>> 3 / 0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero

#error d nombre es q no esta definida la variable divisiro en este caso
>>> print(divisor)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'divisor' is not defined

#no se puede sumar un int con un str
>>> 0 + "2"
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'int' and 'str'

# p preveer estas excepciones para que no se interrumpa la ejecución utilizar palabras reservadas "try" "except"
try:
    # aquí ponemos el código que puede lanzar excepciones
except:
    # entrará aquí en caso que se haya producido una excepción

def mitades(n):
  return n/2

mitades(0)

#desafio 2 y 3
def mitades(n):
  a=0

  try:
    atr=n/a
    return (f"res: {atr}")

  except:
    return ("no se puede")

mitades(1)

#raise, se puede indicar el tipo de excepción que deseamos lanzar y el mensaje de que queremos brindarle al usuario
def check_int_type():
  if type(x)  != int:
    raise TypeError("Only integers are allowed") #solo se pueden nros enteros

#nota neg se terminan d leer
#nota muy alta pasa pero prom demasiado alto
#p hacer comprobaciones uso raise-> ej si pide nro d doc si devuelve algo mayor q marque error (no q solo devuelva unstr), d forma q el programa se frene
#se puede usar

# Solve the quadratic equation ax**2 + bx + c = 0

# import complex math module
import cmath

a = 1
b = 5
c = 6

# calculate the discriminant
d = (b**2) - (4*a*c)

# find two solutions
sol1 = (-b-cmath.sqrt(d))/(2*a)            #daba error xq falta cerrar un parentesis el originala pero ahi ya lo arregle
sol2 = (-b+cmath.sqrt(d))/(2*a)

print('The solution are {0} and {1}'.format(sol1,sol2))

# Solve the quadratic equation ax**2 + bx + c = 0

# import complex math module
import cmath

a = 0 #da error porq al en hacer algo dividio 0 no existe en sol1 y sol 2
b = 5
c = 6

# calculate the discriminant
d = (b**2) - (4*a*c)

# find two solutions
sol1 = (-b-cmath.sqrt(d))/(2*a)          #error es valor por valor de a
sol2 = (-b+cmath.sqrt(d))/(2*a)

print('The solution are {0} and {1}'.format(sol1,sol2))

# Solve the quadratic equation ax**2 + bx + c = 0

# import complex math module
import cmath

a = 0
b = 5
c = 6

# calculate the discriminant
d = (b**2) - (4*a*c)

try:
    sol1 = (-b-cmath.sqrt(d))/(2*a)
    sol2 = (-b+cmath.sqrt(d))/(2*a)
    print('The solution are {0} and {1}'.format(sol1,sol2))

except:
    print("falla")

print("siguio corriendo") 
print("a vale: " + str(a))

# Solve the quadratic equation ax**2 + bx + c = 0

# import complex math module
import cmath

a = 0
b = 5
c = 6

# calculate the discriminant
d = (b**2) - (4*a*c)

if a ==0:
    raise TypeError("a debe ser!")    #da error xq no es un type error, es otro tipo de error

print("siguio corriendo") 
print("a vale: " + str(a))

else:
       raise Exception('Es peligroso atacar a este zombi') #excepcion
